// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StonkBot.Data;

#nullable disable

namespace StonkBot.Migrations
{
    [DbContext(typeof(StonkBotDbContext))]
    [Migration("20230517214005_MoreAlertTracking")]
    partial class MoreAlertTracking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("StonkBot.Data.Entities.AuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("access_token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("expires_in")
                        .HasColumnType("INTEGER");

                    b.Property<string>("refresh_token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("refresh_token_expires_in")
                        .HasColumnType("INTEGER");

                    b.Property<string>("scope")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("tokenCreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("token_type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("access_token");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.CalculatedFields", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<string>("AboveUpperShadow")
                        .HasColumnType("TEXT");

                    b.Property<string>("FHTargetDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("FiveDayStable")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromYesterday")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastFHTarget")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("UpToday")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("UpperShadow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VolumeAlert")
                        .HasColumnType("TEXT");

                    b.Property<string>("VolumeAlert2")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "Date");

                    b.HasIndex("Symbol", "Date");

                    b.ToTable("CalculatedFields");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.DiscordMessageRecord", b =>
                {
                    b.Property<ulong>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId");

                    b.HasIndex("Channel", "Date");

                    b.ToTable("DiscordMessageRecords");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.EarningsReport", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("ErHighDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ErLowDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HighHalfAlert")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HighThirdAlert")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LowHalfAlert")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LowThirdAlert")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NegStartAlert1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NegStartAlert2")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NegSureStartAlert1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NegSureStartAlert2")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PeriodEnding")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartAlert1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartAlert2")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SureErHighDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SureErLowDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SureStartAlert1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SureStartAlert2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "Date");

                    b.ToTable("EarningsReports");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.EsCandle", b =>
                {
                    b.Property<DateTime>("ChartTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("ChartTime");

                    b.HasIndex("ChartTime");

                    b.ToTable("EsCandles");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.HistoricalData", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("CalculatedFieldsDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CalculatedFieldsSymbol")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "Date");

                    b.HasIndex("CalculatedFieldsSymbol", "CalculatedFieldsDate");

                    b.HasIndex("Symbol", "Date");

                    b.ToTable("HistoricalData");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.IndustryInfo", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Industry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sector")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol");

                    b.HasIndex("Symbol");

                    b.ToTable("IndustryInfo");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.IpoHData", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "Date");

                    b.HasIndex("Symbol", "Date");

                    b.ToTable("IpoHData");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.IpoListing", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Close")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedListingDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstPassDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("High")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSecondPassDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Low")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferAmmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OfferingEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferingPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Open")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ScrapeDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol");

                    b.HasIndex("Symbol");

                    b.ToTable("IpoListings");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.HistoricalData", b =>
                {
                    b.HasOne("StonkBot.Data.Entities.IndustryInfo", "IndustryInfo")
                        .WithMany()
                        .HasForeignKey("Symbol");

                    b.HasOne("StonkBot.Data.Entities.CalculatedFields", "CalculatedFields")
                        .WithMany()
                        .HasForeignKey("CalculatedFieldsSymbol", "CalculatedFieldsDate");

                    b.Navigation("CalculatedFields");

                    b.Navigation("IndustryInfo");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.IpoHData", b =>
                {
                    b.HasOne("StonkBot.Data.Entities.IpoListing", null)
                        .WithMany("HData")
                        .HasForeignKey("Symbol");
                });

            modelBuilder.Entity("StonkBot.Data.Entities.IpoListing", b =>
                {
                    b.Navigation("HData");
                });
#pragma warning restore 612, 618
        }
    }
}
